name: Quality Gates Inventory
description: Run bugeera quality gates

inputs:
  github-token:
    description: GitHub token
    required: false
    default: ''
  openai-api-key:
    description: OpenAI API key
    required: false
    default: ''
  fail-on:
    description: "'' or 'policy' to fail on policy violations"
    required: false
    default: ''
  output-dir:
    description: Output directory for artifacts
    required: false
    default: 'qg_artifacts'
  upload-artifacts:
    description: "'true' to upload artifacts"
    required: false
    default: 'true'
  artifact-name:
    description: Artifact name
    required: false
    default: 'qg_artifacts'
  github-repo:
    description: Repo full name (e.g. owner/repo)
    required: true
  openai-model:
    description: OpenAI model
    required: false
    default: 'gpt-4o-mini'

runs:
  using: composite
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install deps
      shell: bash
      run: |
        set -euo pipefail
        python -m pip install --upgrade pip
        if [ -f tools/requirements.txt ]; then
          python -m pip install -r tools/requirements.txt || true
        elif [ -f requirements.txt ]; then
          python -m pip install -r requirements.txt || true
        fi
        python -m pip install PyYAML requests openai

    - name: Run Quality Gates
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token || github.token }}
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        FAIL_ON: ${{ inputs.fail-on }}
        OUTPUT_DIR: ${{ inputs.output-dir }}
        UPLOAD_ARTIFACTS: ${{ inputs.upload-artifacts }}
        ARTIFACT_NAME: ${{ inputs.artifact-name }}
        GITHUB_REPO: ${{ inputs.github-repo }}
        OPENAI_MODEL: ${{ inputs.openai-model }}
      run: |
        set -euo pipefail
        echo "Repo: ${GITHUB_REPO}"
        echo "Output: ${OUTPUT_DIR}"
        mkdir -p "${OUTPUT_DIR}"

        if [ -f "${GITHUB_ACTION_PATH}/qg_analyzer.py" ]; then
          python "${GITHUB_ACTION_PATH}/qg_analyzer.py" \
            --repo-dir . \
            --output-dir "${OUTPUT_DIR}" \
            --github-repo "${GITHUB_REPO}" \
            --fail-on "${FAIL_ON}"
        elif [ -f tools/qg_analyzer.py ]; then
          python tools/qg_analyzer.py \
            --repo-dir . \
            --output-dir "${OUTPUT_DIR}" \
            --github-repo "${GITHUB_REPO}" \
            --fail-on "${FAIL_ON}"
        else
          echo "No analyzer found"; exit 1
        fi

        # Do not fail by default; enforcement only if explicitly enabled via input
        if [ "${FAIL_ON}" = "policy" ] && [ -f "${OUTPUT_DIR}/policy_failed" ]; then
          echo "Policy failed"
          exit 1
        fi

    - name: Log Quality Gates summary
      shell: bash
      env:
        OUTPUT_DIR: ${{ inputs.output-dir }}
      run: |
        set -euo pipefail
        JSON_PATH="${OUTPUT_DIR}/qg_report.json"
        if [ ! -f "$JSON_PATH" ]; then
          echo "::warning::Quality Gates: report not found"
          exit 0
        fi
        SUMMARY=$(jq -r '"sufficiency=\(.scores.sufficiency // 0), completeness=\(.scores.completeness // 0), redundancy=\(.scores.redundancy // 0), resilience=\(.scores.resilience // 0)"' "$JSON_PATH")
        echo "::notice::Quality Gates scores: $SUMMARY"
        COUNT=$(jq -r '.top_gaps | length' "$JSON_PATH" 2>/dev/null || echo 0)
        if [ "${COUNT}" -gt 0 ]; then
          jq -r '.top_gaps[:3][] | "::warning::Gap: \(.)"' "$JSON_PATH"
        else
          echo "::notice::No top gaps detected"
        fi

    - name: Upload artifacts
      if: ${{ inputs.upload-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.output-dir }}