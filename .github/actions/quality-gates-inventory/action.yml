name: Quality Gates Inventory
description: Parse GitHub Actions workflows, inventory Quality Gates, map to ISO/IEC 25010, generate reports, and (optionally) AI assessment.

inputs:
  fail-on:
    description: "Policy to fail the job on critical gaps (use 'policy' to enforce)"
    required: false
    default: ""
  output-dir:
    description: "Directory to write artifacts"
    required: false
    default: "qg_artifacts"
  upload-artifacts:
    description: "Whether to upload artifacts via actions/upload-artifact"
    required: false
    default: "true"
  artifact-name:
    description: "Artifact name when uploading"
    required: false
    default: "qg_artifacts"
  github-repo:
    description: "owner/repo, defaults to GITHUB_REPOSITORY"
    required: false
    default: ""
  openai-model:
    description: "OpenAI model name (if OPENAI_API_KEY provided)"
    required: false
    default: "gpt-4o-mini"

outputs:
  report_json_path:
    description: "Path to qg_report.json"
    value: ${{ steps.set-outputs.outputs.report_json_path }}
  report_md_path:
    description: "Path to qg_report.md"
    value: ${{ steps.set-outputs.outputs.report_md_path }}
  summary:
    description: "One-line scores summary"
    value: ${{ steps.set-outputs.outputs.summary }}
  top_gaps:
    description: "Top gaps (JSON array)"
    value: ${{ steps.set-outputs.outputs.top_gaps }}

runs:
  using: composite
  steps:
    - name: Set repo var
      id: repo
      shell: bash
      run: |
        if [ -z "${{ inputs.github-repo }}" ]; then echo "val=${GITHUB_REPOSITORY}" >> $GITHUB_OUTPUT; else echo "val=${{ inputs.github-repo }}" >> $GITHUB_OUTPUT; fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install PyYAML requests openai; fi

    - name: Run Quality Gates Analyzer
      id: run
      shell: bash
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ steps.repo.outputs.val }}
        FAIL_ON: ${{ inputs.fail-on }}
        OPENAI_API_KEY: ${{ env.OPENAI_API_KEY || secrets.OPENAI_API_KEY }}
        OPENAI_MODEL: ${{ inputs.openai-model }}
      run: |
        # Prefer embedded wrapper to ensure compatibility when tools/ not present in target repo
        if [ -f .github/actions/quality-gates-inventory/qg_analyzer.py ]; then
          python .github/actions/quality-gates-inventory/qg_analyzer.py --repo-dir . --output-dir "${{ inputs.output-dir }}" --github-repo "$GITHUB_REPOSITORY" --fail-on "${FAIL_ON}"
        else
          python tools/qg_analyzer.py --repo-dir . --output-dir "${{ inputs.output-dir }}" --github-repo "$GITHUB_REPOSITORY" --fail-on "${FAIL_ON}"
        fi

    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        JSON="${{ inputs.output-dir }}/qg_report.json"
        MD="${{ inputs.output-dir }}/qg_report.md"
        if [ -f "$JSON" ]; then 
          SUMMARY=$(python - <<'PY'
import json
import sys
path=sys.argv[1]
with open(path) as f:
    d=json.load(f)
s=d.get('scores',{})
print(f"Scores - sufficiency: {s.get('sufficiency',0)}, completeness: {s.get('completeness',0)}, redundancy: {s.get('redundancy',0)}, resilience: {s.get('resilience',0)}")
PY
          "$JSON")
          TOP_GAPS=$(python - <<'PY'
import json,sys
with open(sys.argv[1]) as f:
    d=json.load(f)
print(json.dumps(d.get('top_gaps',[])))
PY
          "$JSON")
        else
          SUMMARY="No report found"
          TOP_GAPS="[]"
        fi
        echo "report_json_path=$JSON" >> $GITHUB_OUTPUT
        echo "report_md_path=$MD" >> $GITHUB_OUTPUT
        echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
        echo "top_gaps=$TOP_GAPS" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      if: ${{ inputs.upload-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.output-dir }}/

    - name: Enforce fail-on policy
      if: ${{ inputs.fail-on == 'policy' }}
      shell: bash
      run: |
        python - <<'PY'
import json, sys
path='${{ inputs.output-dir }}/qg_report.json'
try:
    with open(path) as f:
        data=json.load(f)
except Exception:
    print('Policy failure: no report produced')
    sys.exit(2)
missing=[g for g in ["tests","lint","coverage","sast","sca","secrets"] if g not in {x['category'] for x in data.get('gates',[])}]
low_res = data.get('scores',{}).get('resilience',0)<0.4
if missing or low_res:
    print('Policy failure due to critical gaps:')
    for m in missing:
        print('- missing gate:', m)
    if low_res:
        print('- low resilience score')
    sys.exit(2)
print('Policy satisfied')
PY

